/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Controladores;

import Modelos.FiguraEstandar;
import Modelos.Imagen;
import Modelos.Jugador;
import Modelos.Proyectil;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.LinkedList;



/**
 *
 * @author Santiago D
 */
public class Lienzo extends javax.swing.JPanel implements Runnable{

    
    private LinkedList<FiguraEstandar> misFiguras;
    private boolean isPlaying;
    private int i = 0,segundos = 0,aux = -3,aux1 = 0,puntos = 0;
    private Imagen adver;
    private Imagen flecha;
    private Proyectil shuriken;

    /**
     * Metodo que retorna los puntos del jugador
     * @return 
     */
    public int getPuntos() {
        return puntos;
    }

    /**
     * Metodo que setea los puntos
     * @param puntos 
     */
    public void setPuntos(int puntos) {
        this.puntos = puntos;
    }

    /**
     * Metodo que retorna la imagen de advertencia
     * @return 
     */
    public Imagen getAdver() {
        return adver;
    }

    /**
     * Metodo que setea la imagen de advertencia
     * @param adver 
     */
    public void setAdver(Imagen adver) {
        this.adver = adver;
    }

    /**
     * Metodo que retorna la imagen de la flecha
     * @return 
     */
    public Imagen getFlecha() {
        return flecha;
    }

    /**
     * Metodo que seta la imagen de la flecha
     * @param flecha 
     */
    public void setFlecha(Imagen flecha) {
        this.flecha = flecha;
    }

    /**
     * Metodo que devuelve el shuriken
     * @return 
     */
    public Proyectil getShuriken() {
        return shuriken;
    }

    /**
     * Metodo que setea el proyectil
     * @param shuriken 
     */
    public void setShuriken(Proyectil shuriken) {
        this.shuriken = shuriken;
    }
    
    /**
     * Metodo constructor del lienzo
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
        this.isPlaying = false;
        this.misFiguras = new LinkedList<>();
        adver = new Imagen("src/Imagenes/adver.png", 0, 0,0,0);
        flecha = new Imagen("src/Imagenes/fizc.png", 0, 0,0,0);
        shuriken = new Proyectil("src/Imagenes/shuriken.png", 0, 0,0,0);
        this.misFiguras.add(adver);
        this.misFiguras.add(flecha);
        this.misFiguras.add(shuriken);
    }

    /**
     * Metodo que retorna el estado de isPlaying
     * @return 
     */
    public boolean isIsPlaying() {
        return isPlaying;
    }

    /**
     * Metodo que modifica el valor de isPlaying
     * @param isPlaying 
     */
    public void setIsPlaying(boolean isPlaying) {
        this.isPlaying = isPlaying;
    }

    /**
     * Metodo que retorna la lista de figuras del liezo
     * @return 
     */
    public LinkedList<FiguraEstandar> getMisFiguras() {
        return misFiguras;
    }

    /**
     * Metodo que setea los valores de la lista de figuras
     * @param misFiguras 
     */
    public void setMisFiguras(LinkedList<FiguraEstandar> misFiguras) {
        this.misFiguras = misFiguras;
    }
    
    /**
     * Metodo que permite dibujar en el lienzo una imagen
     * @param g
     * @param imagenActual 
     */
    public void dibujarImagen(Graphics g,Imagen imagenActual){
        Toolkit t = Toolkit.getDefaultToolkit();
        Image imagen = t.getImage(imagenActual.getUrl());
        g.drawImage(imagen,imagenActual.getX(),imagenActual.getY(), imagenActual.getAncho(),imagenActual.getAlto(), this);
    }

    /**
     * Metodo que permite pintar las figuras dispuestas para el juego
     * @param g 
     */
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        for(int a = 0;a < this.misFiguras.size();a++){
            FiguraEstandar actual = this.misFiguras.get(a);
            if(actual instanceof Imagen){
                dibujarImagen(g, (Imagen) actual);                
            }
        }        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo que permite que el juego corra con todos los valores dados
     */
    @Override
    public void run() {
        while(this.isPlaying){
            repaint();
            mover();
            esperar(5);
            i++;
            if(i == 200){
               i = 0;
               segundos++;               
            }                        
        }
        System.out.println("Fin del proceso");
    }

    /**
     * Metodo que espera una cierta cantidad de tiempo para que el programa continue su proceso
     * @param milisegundos 
     */
    private void esperar(int milisegundos) {
        try {
            Thread.sleep(milisegundos);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * Metodo que permite mostrar las advertencias en diferentes lugares en el transcurso del juego
     */
    public void mover(){
        for(FiguraEstandar actual: this.misFiguras){
            if(actual instanceof FiguraEstandar){
                aparecer();
                desaparecer();
                if(this.segundos>=3){
                    flecha3();
                    flecha4();
                }
            }
        }
    }

    /**
     * Metodo que permite obtener el valor de i
     * @return 
     */
    public int getI() {
        return i/2;
    }

    /**
     * Metodo que permite modificar el valor de i
     * @param i 
     */
    public void setI(int i) {
        this.i = i;
    }

    /**
     * Metodo que permite obtenr el valor de segundos
     * @return 
     */
    public int getSegundos() {
        return segundos;
    }

    /**
     * Metodo que permite cambiar el valor de segundos
     * @param segundos 
     */
    public void setSegundos(int segundos) {
        this.segundos = segundos;
    }

    /**
     * Metodo que retorna el valor de aux
     * @return 
     */
    public int getAux() {
        return aux;
    }

    /**
     * Metodo que permite cambiar el valor de aux
     * @param aux 
     */
    public void setAux(int aux) {
        this.aux = aux;
    }

    /**
     * Metodo que permite obtener el valor de aux1
     * @return 
     */
    public int getAux1() {
        return aux1;
    }

    /**
     * Metodo que permite cambiar el valor de aux1
     * @param aux1 
     */
    public void setAux1(int aux1) {
        this.aux1 = aux1;
    }
    
    /**
     * Metodo que da una posicion de 6 aleatorias a el signo de advertencia ademas de la posicion de 
     * Su respectiva flecha en 3 posiciones aleatorias
     */
    public void caso1(){
        this.adver.setX(10);
        this.adver.setY(470);
        int num2 = (int)Math.floor(Math.random()*2+1);
        if(num2 == 1){
            this.flecha.setX(88);
            this.flecha.setY(495);
            this.flecha.setUrl("src/Imagenes/fdec.png");
        }else if(num2 == 2){
            this.flecha.setX(82);
            this.flecha.setY(470);
            this.flecha.setUrl("src/Imagenes/fdear.png");
        }   
    }
    
    /**
     * Metodo que da una posicion de 3 aleatorias a la flecha de advertencia 
     * @param num2
     */
    public void caso2(int num2){
        if(num2 == 1){
            this.flecha.setX(88);
            this.flecha.setY(355);
            this.flecha.setUrl("src/Imagenes/fdec.png");
        }else if(num2 == 2){
            this.flecha.setX(82);
            this.flecha.setY(330);
            this.flecha.setUrl("src/Imagenes/fdear.png");
        }else if(num2 == 3){
            this.flecha.setX(82);
            this.flecha.setY(380);
            this.flecha.setUrl("src/Imagenes/fdeab.png");
        }
    }
    
    /**
     * Metodo complementario que contiene al caso2 para darle una posicion al signo de advertencia y a la flecha
     */
    public void caso2_1(){
        this.adver.setX(10);
        this.adver.setY(330);
        int num2 = (int)Math.floor(Math.random()*3+1);
        caso2(num2);
    }
    
    /**
     * Metodo que da una posicion de 3 aleatorias a la flecha de advertencia 
     * @param num2
     */
    public void caso3(int num2){
        if(num2 == 1){
            this.flecha.setX(88);
            this.flecha.setY(195);
            this.flecha.setUrl("src/Imagenes/fdec.png");
        }else if(num2 == 2){
            this.flecha.setX(82);
            this.flecha.setY(170);
            this.flecha.setUrl("src/Imagenes/fdear.png");
        }else if(num2 == 3){
            this.flecha.setX(82);
            this.flecha.setY(220);
            this.flecha.setUrl("src/Imagenes/fdeab.png");
        }
    }
    
    /**
     * Metodo complementario que contiene al caso3 para darle una posicion al signo de advertencia y a la flecha
     */
    public void caso3_1(){
        this.adver.setX(10);
        this.adver.setY(170);
        int num2 = (int)Math.floor(Math.random()*3+1);
        caso3(num2);
    }
    
    /**
     * Metodo que da una posicion de 3 aleatorias a la flecha de advertencia 
     * @param num2
     */
    public void caso4(int num2){
        if(num2 == 1){
            this.flecha.setX(1080);
            this.flecha.setY(189);
            this.flecha.setUrl("src/Imagenes/fizc.png");
        }else if(num2 == 2){
            this.flecha.setX(1085);
            this.flecha.setY(170);
            this.flecha.setUrl("src/Imagenes/fizar.png");
        }else if(num2 == 3){
            this.flecha.setX(1085);
            this.flecha.setY(220);
            this.flecha.setUrl("src/Imagenes/fizab.png");
        }
    }
    
    /**
     * Metodo complementario que contiene al caso4 para darle una posicion al signo de advertencia y a la flecha
     */
    public void caso4_1(){
        this.adver.setX(1110);
        this.adver.setY(170);
        int num2 = (int)Math.floor(Math.random()*3+1);
        caso4(num2);
    }
    
    /**
     * Metodo que da una posicion de 3 aleatorias a la flecha de advertencia 
     * @param num2
     */
    public void caso5(int num2){
        if(num2 == 1){
            this.flecha.setX(1080);
            this.flecha.setY(349);
            this.flecha.setUrl("src/Imagenes/fizc.png");
        }else if(num2 == 2){
            this.flecha.setX(1085);
            this.flecha.setY(330);
            this.flecha.setUrl("src/Imagenes/fizar.png");
        }else if(num2 == 3){
            this.flecha.setX(1085);
            this.flecha.setY(380);
            this.flecha.setUrl("src/Imagenes/fizab.png");
        }
    }
    
    /**
     * Metodo complementario que contiene al caso4 para darle una posicion al signo de advertencia y a la flecha
     */
    public void caso5_1(){
        this.adver.setX(1110);
        this.adver.setY(330);
        int num2 = (int)Math.floor(Math.random()*3+1);
        caso5(num2);
    }
    
    /**
     * Metodo que da una posicion de 3 aleatorias a la flecha de advertencia 
     */
    public void caso6(){
        this.adver.setX(1110);
        this.adver.setY(470);
        int num2 = (int)Math.floor(Math.random()*2+1);
        if(num2 == 1){
            this.flecha.setX(1080);
            this.flecha.setY(489);
            this.flecha.setUrl("src/Imagenes/fizc.png");
        }else if(num2 == 2){
            this.flecha.setX(1085);
            this.flecha.setY(470);
            this.flecha.setUrl("src/Imagenes/fizar.png");
        }
    }
    
    /**
     * Metodo que permite que aparesca la advertencia dependiendo de cuanto tiempo halla pasado
     */
    public void aparecer(){
      if(this.segundos >= 2){
          if(aux != this.segundos && aux+1 != this.segundos){                        
              aux = this.segundos;
              this.adver.setAlto(80);
              this.adver.setAncho(80);
              casos();
          }                   
      }  
    }
    
    /**
     * Metodo que permite que desaparesca la advertencia dependiendo de cuanto tiempo halla pasado
     */
    public void desaparecer(){
        if(this.segundos >= 3){
            if(aux1 != this.segundos && aux1+1 != this.segundos){
                aux1 = this.segundos;
                puntos++;
                this.adver.setAlto(0);
                this.adver.setAncho(0);
                this.flecha.setAlto(0);
                this.flecha.setAncho(0);
            }
        }
    }
    
    /**
     * Metodo que compila todos los casos previamente mencionados
     */
    public void casos(){
        this.flecha.setAlto(40);
        this.flecha.setAncho(40);
        this.shuriken.setAlto(0);
        this.shuriken.setAncho(0);
        int num1 = (int)Math.floor(Math.random()*6+1);
        switch (num1) {
            case 1 -> caso1();                            
            case 2 -> caso2_1();                            
            case 3 -> caso3_1();                            
            case 4 -> caso4_1();
            case 5 -> caso5_1();                            
            case 6 -> caso6();                      
        }
    }
    
    /**
     * Metodo que segun la direcion de la flecha de advertencia setea el puntero del proyectil para 
     * Posteriormente ser lanzado y esquivado por el jugador
     */
    public void flecha1(){
        if(flecha.getUrl().equals("src/Imagenes/fdec.png")){
            this.shuriken.setPuntero("derecha-centro");
        }else if(flecha.getUrl().equals("src/Imagenes/fdear.png")){
            this.shuriken.setPuntero("derecha-arriba");
        }else if(flecha.getUrl().equals("src/Imagenes/fdeab.png")){
            this.shuriken.setPuntero("derecha-abajo");
        }else if(flecha.getUrl().equals("src/Imagenes/fizc.png")){
            this.shuriken.setPuntero("izquierda-centro");
        }else if(flecha.getUrl().equals("src/Imagenes/fizar.png")){
            this.shuriken.setPuntero("izquierda-arriba");
        }else if(flecha.getUrl().equals("src/Imagenes/fizab.png")){
            this.shuriken.setPuntero("izquierda-abajo");
        }
    }
    
    /**
     * Metodo que segun la direccion del puntero del proyectil lo lanza en determinada direccion 
     * ademas compila los metodos flecha5 y flecha6 que son mas verificaciones de el puntero del proyectil
     */
    public void flecha2(){
        if(this.shuriken.getPuntero().equals("derecha-abajo")){
            int num2 = (int)Math.floor(Math.random()*2+1);
            if(num2 == 1) this.shuriken.moverDE(1);
            else this.shuriken.moverDE(3);
            this.shuriken.moverAB(1);
        }else if(this.shuriken.getPuntero().equals("izquierda-centro")){
            this.shuriken.moverIZ(2);
        }else if(this.shuriken.getPuntero().equals("izquierda-arriba")){
            flecha6();
        }else if(this.shuriken.getPuntero().equals("izquierda-abajo")){
            flecha5();
        }
    }

    /**
     * Hace aparecer el proyectil una vez se halla ido la advertencia
     */
    public void flecha3(){
        if(this.adver.getAlto() == 0 && this.shuriken.getAlto()== 0){
            this.shuriken.setAlto(60);
            this.shuriken.setAncho(60);
            this.shuriken.setX(this.adver.getX());
            this.shuriken.setY(this.adver.getY());
            flecha1();
        }
    }
    
    /**
     * Verifica el puntero del proyectil para saber a donde mover el shuriken
     */
    public void flecha4(){
        if(this.adver.getAlto() == 0){
            if(this.shuriken.getPuntero().equals("derecha-centro")){
                this.shuriken.moverDE(2);
            }else if(this.shuriken.getPuntero().equals("derecha-arriba")){
                int num2 = (int)Math.floor(Math.random()*2+1);
                if(num2 == 1) this.shuriken.moverDE(1);
                else this.shuriken.moverDE(3);                                
                this.shuriken.moverAR(1);
            }
            flecha2();
        }
    }
    
    /**
     * Una vez dada cirta valor del puntero este lo mueve para de izquierda y para abajo
     */
    public void flecha5(){
        int num2 = (int)Math.floor(Math.random()*2+1);
        if(num2 == 1) this.shuriken.moverIZ(1);
        else this.shuriken.moverIZ(3);
        this.shuriken.moverAB(1);        
    }
    
    /**
     * Una vez dada cirta valor del puntero este lo mueve para de izquierda y para arriba
     */
    public void flecha6(){
        int num2 = (int)Math.floor(Math.random()*2+1);
        if(num2 == 1) this.shuriken.moverIZ(1);
        else this.shuriken.moverIZ(3);
        this.shuriken.moverAR(1);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
